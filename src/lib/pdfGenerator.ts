import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Expense, ExpenseCategory } from './entities/Expense';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface BudgetData {
  category: ExpenseCategory;
  budget: number;
  spent: number;
  percentage: number;
  isOverBudget: boolean;
}

interface PDFData {
  expenses: Expense[];
  budgets: BudgetData[];
  totalSpent: number;
  period: string;
  userName?: string;
}

export function generateExpensePDF(data: PDFData): void {
  try {
    console.log('Creating PDF document...');
    const doc = new jsPDF();
    
    // Add autoTable plugin
    (doc as any).autoTable = autoTable;
    console.log('AutoTable plugin added');
  
  // Set up colors
  const primaryColor = [59, 130, 246]; // Blue
  const successColor = [34, 197, 94];  // Green
  const warningColor = [245, 158, 11]; // Yellow
  const dangerColor = [239, 68, 68];   // Red
  const darkColor = [30, 41, 59];      // Dark slate

  // Header
  doc.setFillColor(...primaryColor);
  doc.rect(0, 0, 210, 30, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('FinanceMate', 20, 20);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text('Expense Summary Report', 20, 25);

  // Period and date
  doc.setTextColor(...darkColor);
  doc.setFontSize(10);
  doc.text(`Period: ${data.period}`, 150, 20);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 150, 25);

  let yPosition = 45;

  // Summary Section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(...darkColor);
  doc.text('Summary', 20, yPosition);
  yPosition += 10;

  // Total spent
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Total Spent: $${data.totalSpent.toFixed(2)}`, 20, yPosition);
  doc.text(`Total Expenses: ${data.expenses.length}`, 20, yPosition + 5);
  yPosition += 15;

  // Budget Performance Section
  if (data.budgets.length > 0) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Budget Performance', 20, yPosition);
    yPosition += 10;

    // Budget table
    const budgetTableData = data.budgets.map(budget => [
      budget.category.charAt(0).toUpperCase() + budget.category.slice(1),
      `$${budget.budget.toFixed(2)}`,
      `$${budget.spent.toFixed(2)}`,
      `${budget.percentage.toFixed(0)}%`,
      budget.isOverBudget ? 'Over Budget' : 'Within Budget'
    ]);

    doc.autoTable({
      startY: yPosition,
      head: [['Category', 'Budget', 'Spent', 'Percentage', 'Status']],
      body: budgetTableData,
      headStyles: {
        fillColor: primaryColor,
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      bodyStyles: {
        textColor: darkColor
      },
      alternateRowStyles: {
        fillColor: [248, 250, 252]
      },
      columnStyles: {
        0: { cellWidth: 40 },
        1: { cellWidth: 30, halign: 'right' },
        2: { cellWidth: 30, halign: 'right' },
        3: { cellWidth: 30, halign: 'right' },
        4: { cellWidth: 40, halign: 'center' }
      }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 15;
  }

  // Expenses Section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(...darkColor);
  doc.text('Expense Details', 20, yPosition);
  yPosition += 10;

  // Prepare expense data
  const expenseTableData = data.expenses.map(expense => [
    expense.title,
    expense.category.charAt(0).toUpperCase() + expense.category.slice(1),
    `$${Number(expense.amount).toFixed(2)}`,
    new Date(expense.date).toLocaleDateString(),
    expense.description || '-'
  ]);

  doc.autoTable({
    startY: yPosition,
    head: [['Title', 'Category', 'Amount', 'Date', 'Description']],
    body: expenseTableData,
    headStyles: {
      fillColor: primaryColor,
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    bodyStyles: {
      textColor: darkColor
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252]
    },
    columnStyles: {
      0: { cellWidth: 40 },
      1: { cellWidth: 25 },
      2: { cellWidth: 25, halign: 'right' },
      3: { cellWidth: 25 },
      4: { cellWidth: 35 }
    },
    pageBreak: 'auto',
    margin: { top: 20 }
  });

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, 20, 285);
    doc.text('Generated by FinanceMate', 150, 285);
  }

  // Download the PDF
  const fileName = `expense-summary-${data.period.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`;
  console.log('Saving PDF with filename:', fileName);
  doc.save(fileName);
  console.log('PDF saved successfully');
  
  } catch (error) {
    console.error('Error in PDF generation:', error);
    throw error;
  }
}

export function getPeriodString(selectedMonth: number, selectedYear: number, filterByDate: boolean): string {
  if (filterByDate) {
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return `${monthNames[selectedMonth - 1]} ${selectedYear}`;
  }
  return 'All Time';
}

// Simple test function
export function testPDFGeneration(): void {
  try {
    console.log('Testing PDF generation...');
    const doc = new jsPDF();
    doc.text('Test PDF', 20, 20);
    doc.save('test.pdf');
    console.log('Test PDF generated successfully');
  } catch (error) {
    console.error('Test PDF generation failed:', error);
    throw error;
  }
}
